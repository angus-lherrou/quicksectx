os: linux
language: python

addons:
  apt:
    packages:
      - gdb
      - python-dbg
      - python3-dbg

cache:
  pip: true
  directories:
    - $HOME/.ccache

python:
#   - 3.8
#   - 3.7
  - 3.6

env:
  global:
    - secure: P6c1spkY+mxyZKX+OIaUzcoJLLfZCxBEj6e/ZVThO6u4IGOoFajceQ/iXsaXLtoBhSqkbVMNs1YWqGFD8MLhBvrTY3DRQAKvavT38Z1tM5Vd91KzSgZkNRbNMswRu09STop2Eb0rl9iK81i+Hgsq3KTXtbOMrMCqJtpKOlWasvF5ZrMmwS6DXyIPW4ow671O4s2yKtkfXt3NGiX+GBlTE4ed6BJcrZ072HVR2uCg4vb1kPB5CH3Mz+r7bbVU7EY8QsUke20ZtHX1c3NErN5RSHrbLKujIeo21gdntv8nVldVX5iYMbzStqJyBJ8tmesstv3XUfMkAHnB0CRdVLm1O2fVMDnYehEWxbtGbBBpcrOG/T3U4FPKffB3Ao0uIh+k2uqPBdP4mEcqd6rEo7PdSlC/p6zNnw+JpqdQ0utHwBhIbeELCi1pytKRbHI4G+7UlJZE+Tmw/BHnPDzQs9HjZVyzDjVarfS2xpdhrogGJlCkpxz3eXWN8WbsTdUExZaiFGeZ41TgIyaGaEkrMXA3iLJRzI3VfUAueSUt1VVq8KKHLa1qKt2vn0Dx/3oXTTRz4Nl9Z5sayi68XccVbyjbvv/0SDGQAvd/7/ZhlidW9xPbJtjc6CG6UWRTRkm6bSJQhQ1lq1VsYmPtzCqXqIVNXKINS/j3CvvKla0PejQp9U4=
    - secure: 22S/8zpvjldEjolbeMBLnq/0iXBKMVjFVqVYVEzZbBgdvnbhTWwa9B9mLVHhOwnl8RNFB2P0qTI+5pz8SqL9tf4G+hw/h0bG7OW8cSnMwyp07yNbZrn/9cxzrWhlQn3mLxeOFiNDM1eZ5BmTFJca3roF4KrZ3OVq59ibmCAhe8KY+TqOuf5600nGmDHtVtEQxApyIUUm9VQAKrj1Y0ihJGLF5RLSXODKXTGn2nEfRxrDDf2JYgZWrQ9cCkRC/NpNGpaaXyPC8SXp1UtPAKsDrfVjnh5iejMRLxWTy7oFkrM3DP8wCBCGeiVTyF02mOR0U5ykzd8ydkBeWgSQx1fCXKHXXyzzkqgLvYcnpfPY3UEXqjEO1OnWDsA8rbzgyvQzvuWDP35Yt221t6bo7uqcySMZl1QA+XEnXFVgAroY//7Owy5PNlX5HCWIl0xRBktBNfsZIy/Ff56eqglqL8nE5V4cqISqF5FYQwsO+kQWBFynQit2uUvphEc6ptJPng6qeOtDEd8roo5YcapfuVzphNzwQh713B8cfnAwFrgkfgOo52Ok1Qtn2/4t/97XghFe1Ui9oXgdQ++VZ4KiJgA/dlmXSTyWUI2+nTxSOjNVlv0VZodza85wF7dDFbLLYtziCqx+g+LQdaJFB3ww/ro/W9yLM9ze89xlxDfdR92Rz0M=
    - secure: oGZRRq2qRwO8UDimsfTwxiAhWYDKM/tR81AmTUaypra6qKJ/fU6dWjYrfQ7tw4BvRyR7wOCr2dV0J2D20G1e/QbtVASJzyU4crNcmz8p7Xe1ClVn6dPOEtp9cLjif4A0tMGZOxhEnb4gvv+yXKPUQRcSC3vgfPKVbHQJQuFGa87VpmXdwsKIIMNmq35rrjHdMbAhAsRaLYfXdeJynSvsshrmG1B5AvcIIQgTIHl+524500caX852O88vzzbyidP2eWTWz4ea3p+fpNtUahLHiQPi+oLjmqECbVdMi92qEuzySnIhjcxdItgwSa2IHCfStW+yPxvrcH7UWtOcjX9lM5+gPYsi0t6l6wuVObPVqigY9qCOfMhQtw2DZN9qRoVwQQeC9sGmyivK+hGYXSahtuGF+9C3AVT7SIsgRGqVWPh73r+laMCRnSfi1+hyBy7gKTsboT5hx+rFSVAzuNCoXooJTrMeM1QQEGOgfHNPrYR8idUnLRq2xMtsAgSN2NU0zQxDJV+CJFEZRq9Ly0JQCylLFtMRUDfH16jb6VMwtdkvfpMoDslkZ9me5p126J8vdSlgr7ceH1sM3wul8uILFT4ZVPNeVRyqFP1OFNQpa3YA+sXMzMzshEVDw4NVdolQcMoBC83UkzSsLJQUnOUEVh1mhuFdyVnQuWykndPS7Ac=
    - DEPLOY_TEST=false
    - secure: "N5VeOo+j9P8PEC2Qh/nBYniccWvrrzRw/AhR131c8qK4C6ZgUKGNa8zIfSp6syi0mQ16Z7rf57bsaPrcl6CXbRzUYaNs71xJexvqZHxs1FZXWqNDOdrM1VCuSE8msxzYhz8Gbt37KCJ1DIwFnZHH0860fTmLTmbjGSg/IK2AKH9Dewm81TkEzM6Yzu5saKasbfoR3wY0xsykubNFRJxEB4rseuZhjSfySfYHjiskjXFEfBIYHL6TjdnZcDdtuPnDuk9S0koB/enlGMqMhsKTe1ApZGvZcuYhmPhRydWxU2bjvwkkRcQEdTwOtiUBvi3D8i1FzNJoOWRWhDI5oAz81/bUAMYJSrZ1NpZ4JOOsD/HNfSO9r0DBJdEZAlKJ8uAJYa5IwJMAylSly+DL31k4VcG1unvHDDXMFG52rCLGzdtf/b7oVVh05lZxcvVFio31bfvjjZY8ugLOOywnwRyVgqWGNvJIld1PUGIjyyXKKxpFh7J8jOF8KsxfxU6l1dGEWRMnjTEPYdF1P1t+lOv8rFxRPYR1WIpZte7sGu2NSrJHGynWtx2uJOqMYFVAF3ZqXYtQ3QqbQTZAOZlzKCBXh+y4+lze8DKeGKc7TOtwC00R2E4A+KdxWG1OgePwrlxDUPz4pWYvS+4LLuxrkHgpMmY1fBLpAaXLQeSX1e+vcfg="
    - USE_CCACHE=1
    - CCACHE_SLOPPINESS=pch_defines,time_macros
    - CCACHE_COMPRESS=1
    - PROJECT_NAME=quicksectx
    - GITHUB_REPO_NAME=jianlins/quicksectx
    - CCACHE_MAXSIZE=250M
    - PATH="/usr/lib/ccache:$HOME/miniconda/bin:$PATH"
#     - BACKEND=c,cpp
#   matrix:
#     - BACKEND=c
#     - BACKEND=cpp

matrix:
  include:
    - os: osx
      osx_image: xcode10.3
      env: PY=3 MACOSX_DEPLOYMENT_TARGET=10.9
      python: 3
      language: c
      compiler: clang
      cache: false
# Disabled: coverage analysis takes excessively long, several times longer than without.
#    - python: 3.7
#      env: COVERAGE=1
#     - python: 3.7
#       env: TEST_CODE_STYLE=1
#     - python: 3.8
#       env: LIMITED_API=--limited-api EXCLUDE=--no-file
#     - python: 3.7
#       env: LIMITED_API=--limited-api EXCLUDE=--no-file
#     - python: 3.6
#       env: LIMITED_API=--limited-api EXCLUDE=--no-file
    - env: STACKLESS=true BACKEND=c PY=3
      python: 3.6
#     - python: pypy
#       env: BACKEND=c
#     - python: pypy3
#       env: BACKEND=c
# a secondary pypy tests which is allowed to fail and which specifically
# tests known bugs
#     - python: pypy
#       env: BACKEND=c EXCLUDE="--listfile=tests/pypy_bugs.txt --listfile=tests/pypy2_bugs.txt bugs"
#     - python: pypy3
#       env: BACKEND=c EXCLUDE="--listfile=tests/pypy_bugs.txt bugs"
  allow_failures:
    - env: BACKEND=c EXCLUDE="--listfile=tests/pypy_bugs.txt bugs"
    - env: BACKEND=c EXCLUDE="--listfile=tests/pypy_bugs.txt --listfile=tests/pypy2_bugs.txt bugs"

branches:
  only:
    - master

before_install:
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      # adding apt repos in travis is really fragile => retry a couple of times.
      for i in {1..10}; do travis_retry sudo apt-add-repository --yes 'ppa:ubuntu-toolchain-r/test' && break; sleep 2; done
      for i in {1..10}; do travis_retry sudo apt-get update && travis_retry sudo apt-get install --yes gcc-8  $(echo -n "g++-8";) && break; sleep 2; done
      sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 60 $(echo " --slave /usr/bin/g++ g++ /usr/bin/g++-8";)
      sudo update-alternatives --set gcc /usr/bin/gcc-8
      export CC=gcc
      sudo update-alternatives --set g++ /usr/bin/g++-8; export CXX=g++;
    fi

  - |
    if [ "$TRAVIS_OS_NAME" == "osx" -o "$STACKLESS" == "true" ]; then
      echo "Installing Miniconda"
      if [ "$TRAVIS_OS_NAME" == "osx" ]; then CONDA_PLATFORM=MacOSX; else CONDA_PLATFORM=Linux; fi
      travis_retry wget -O miniconda.sh https://repo.continuum.io/miniconda/Miniconda$PY-latest-${CONDA_PLATFORM}-x86_64.sh || exit 1
      bash miniconda.sh -b -p $HOME/miniconda && rm miniconda.sh || exit 1
      conda --version || exit 1
      conda install --quiet --yes nomkl --file=dev-requirements.txt --file=dev-requirements.txt
      if [ "$TRAVIS_OS_NAME" == "osx" ]; then
        which clang && clang --version && export CC=clang || true
        which clang++ && clang++ --version && export CXX="clang++ -stdlib=libc++" || true
      fi
    fi

  - if [ -n "$CC" ]; then which ${CC%% *}; $CC --version; fi
  - if [ -n "$CXX" ]; then which ${CXX%% *}; $CXX --version; fi

  - if [ "$STACKLESS" == "true" ]; then
      conda config --add channels stackless;
      travis_retry conda install --quiet --yes stackless;
    fi

install:
  - python -c 'import sys; print("Python %s" % (sys.version,))'
  - if [ -n "${TRAVIS_PYTHON_VERSION##*-dev}" ]; then pip install -r dev-requirements.txt $( [ -z "${TRAVIS_PYTHON_VERSION##pypy*}" -o -z "${TRAVIS_PYTHON_VERSION##3.[4789]*}" ] || echo " -r dev-requirements.txt" ) ; fi
#  - CFLAGS="-O2 -ggdb -Wall -Wextra $(python -c 'import sys; print("-fno-strict-aliasing" if sys.version_info[0] == 2 else "")')" python setup.py build

before_script: ccache -s || true

script:
  - pwd; ls;
#   - if [ ! -d "../wheelhouse" ]; mkdir ../wheelhouse; fi
  - pip wheel ./ -w ../wheelhouse/; ls ../wheelhouse;
  - nosetests ${PROJECT_NAME}
#   - PYTHON_DBG="python$( python -c 'import sys; print("%d.%d" % sys.version_info[:2])' )-dbg"
#   - if [ "$TEST_CODE_STYLE" = "1" ]; then
#        STYLE_ARGS="--no-unit --no-doctest --no-file --no-pyregr --no-examples";
#     else
#       STYLE_ARGS=--no-code-style;
#       if [ -z "${BACKEND##*cpp*}" -a -n "${TRAVIS_PYTHON_VERSION##*-dev}" ]; then pip install pythran; fi;
#       if [ "$BACKEND" != "cpp" -a -n "${TRAVIS_PYTHON_VERSION##2*}"  -a -n "${TRAVIS_PYTHON_VERSION##pypy*}" -a -n "${TRAVIS_PYTHON_VERSION##*-dev}" -a -n "${TRAVIS_PYTHON_VERSION##*3.4}" ]; then pip install mypy; fi;
#     fi
# Need to clear the ccache? Try something like this:
#  - if [ -n "${BACKEND##*cpp*}" -a -z "${TRAVIS_PYTHON_VERSION##*3.4}" ]; then ccache -C || true; fi
#   - if [ "$COVERAGE" != "1" ]; then CFLAGS="-O2 -ggdb -Wall -Wextra $(python -c 'import sys; print("-fno-strict-aliasing" if sys.version_info[0] == 2 else "")')" python setup.py build_ext -i $(python -c 'import sys; print("-j5" if sys.version_info >= (3,5) else "")'); fi
#   - CFLAGS="-O0 -ggdb -Wall -Wextra" python runtests.py -vv $STYLE_ARGS -x Debugger --backends=$BACKEND $LIMITED_API $EXCLUDE $(if [ "$COVERAGE" == "1" ]; then echo " --coverage"; fi) $(if [ -z "$TEST_CODE_STYLE" ]; then echo " -j7 "; fi)
#   - ccache -s || true


deploy:
  # deploy develop to pypi.org
  - provider: script
    script: ls wheelhouse && python -m twine upload -u ${PYPI_LOGIN} -p ${PYPI_PWD} --skip-existing ../wheelhouse/${PROJECT_NAME}*
    on:
      repo: ${GITHUB_REPO_NAME}
      tags: true
      condition: "$TRAVIS_OS_NAME == linux && $DEPLOY_TEST == false"


  # deploy develop to test.pypi.org
  - provider: script
    script: python -m twine upload -u ${PYPI_LOGIN} -p ${PYPI_PWD} --skip-existing --repository-url https://test.pypi.org/legacy/ ../wheelhouse/${PROJECT_NAME}*
    on:
      repo: ${GITHUB_REPO_NAME}
      tags: true
      condition: "$TRAVIS_OS_NAME == linux && $DEPLOY_TEST == true"